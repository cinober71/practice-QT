# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interfase.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import binascii

try:
    import Queue
except:
    import queue as Queue

import PyQt5.QtNfc
from smartcard.CardRequest import CardRequest
from smartcard.Exceptions import CardRequestTimeoutException
from smartcard.CardType import AnyCardType
from smartcard import util
from smartcard.CardMonitoring import CardMonitor, CardObserver
import time, serial, sys
import sqlite3
import threading
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QDateTime
# from PyQt5 import  QtSerialPort
from PyQt5.QtSerialPort import QSerialPortInfo
from PyQt5.QtSerialPort import QSerialPort

# from PyQt5.QtGui import QPixmap
returned = None

conn1 = sqlite3.connect("pass.db")
cursor = conn1.cursor()
# cursor.execute("""CREATE TABLE albums
#               (ATR text, UID text, STATUS text)
#            """)
DEF_TAN_TIME = 3
RESULT = None
MONEY = 0
TIME_TAN = 0
WAIT_FOR_SECONDS = 10
SER_TIMEOUT = 0.1  # Timeout for serial Rx
RETURN_CHAR = "\n"  # Char to be sent when Enter key pressed
PASTE_CHAR = "\x16"  # Ctrl code for clipboard paste
baudrate = 115200  # Default baud rate

try:
    from serial.tools.list_ports import comports
except ImportError:
    print("IMPORT ERROR")
if comports:
    com_ports_list = list(comports())
    for port in com_ports_list:
        print(port[0])
    portname = port[0]
# portname = "COM6"  # Default port name
hexmode = False  # Flag to enable hex display

GET_STAT = ([0x02, 0x31, 0x47, 0x03, 0x75])
GET_STAT_try = ([0x02, 0x31, 0x47, 0x03])
SET_TIME_send = [0x02, 0x31, 0x53, 0x36, 0x31, 0x30, 0x03]
SET_T = '1Gu'

SET_TIME = bytes([0x02, 0x31, 0x53, 0x36, 0x31, 0x30, 0x03])

try_crc = '02 31 47 03'


def get_CRC(string):
    xor = 0x00
    i = 1
    # print(len(str))
    while i < len(string):
        xor = xor ^ string[i]
        i += 1
    return hex(xor)


print(get_CRC(GET_STAT_try))


# test woking with bytes
# SET_TIME_send.append((get_CRC(SET_TIME)))
# print(SET_TIME_send)
# print((SET_TIME_send))
#
# print(get_CRC(GET_STAT))
# print(get_CRC(SET_TIME))
# com = ('{0}{1}'.format(SET_TIME, bytes(get_CRC(SET_TIME), encoding='utf-8')))
# print((com))


def delay(ms):
    dieTime = QtCore.QTime.currentTime().addMSecs(ms)
    while QtCore.QTime.currentTime() < dieTime:
        QtCore.QCoreApplication.processEvents(QtCore.QEventLoop.AllEvents, 100)


# Convert a string to bytes
def str_bytes(s):
    return s.encode('latin-1')


# Convert bytes to string
def bytes_str(d):
    return d if type(d) is str else "".join([chr(b) for b in d])


# Return hexadecimal values of data
def hexdump(data):
    return " ".join(["%02X" % ord(b) for b in data])


# Return a string with high-bit chars replaced by hex values
def textdump(data):
    return "".join(["[%02X]" % ord(b) if b > '\x7e' else b for b in data])


import serial.tools.list_ports


def get_ports():
    return serial.tools.list_ports.comports()


def display(s):
    if not hexmode:
        print(textdump(str(s)))
    else:
        print(hexdump(s) + ' ')


def get_reps(s):
    pass
    # print("get_resp- ", s)


def str2hex(s):
    return binascii.hexlify(bytes(str.encode(s)))


def hex2str(s):
    return binascii.unhexlify(s)


class SerialThread(QtCore.QThread):
    def __init__(self, portname, baudrate):  # Initialise with serial port details
        QtCore.QThread.__init__(self)
        self.portname, self.baudrate = portname, baudrate
        self.txq = Queue.Queue()
        self.running = True

    def ser_out(self, s):  # Write outgoing data to serial port if open
        self.txq.put(s)  # ..using a queue to sync with reader thread

    def ser_in(self, s):  # Write incoming serial data to screen
        pass
        print(s)
        print("HEX - ", hexdump(s))

    def run(self):  # Run serial reader thread
        print("Opening %s at %u baud %s" % (self.portname, self.baudrate,
                                            "(hex display)" if hexmode else ""))
        try:
            self.ser = serial.Serial(self.portname, self.baudrate, timeout=SER_TIMEOUT)
            time.sleep(SER_TIMEOUT * 1.2)
            self.ser.flushInput()
            print("Open COM")
        except:
            self.ser = None
        if not self.ser:
            print("Can't open port")
            self.running = False
        while self.running:
            s = self.ser.read(self.ser.in_waiting or 1)
            if s:  # Get data from serial port
                self.ser_in(bytes_str(s))  # ..and convert to string
                self.recives = bytes_str(s)
                get_reps(bytes_str(s))

            if not self.txq.empty():
                txd = str(self.txq.get())  # If Tx data in queue, write to serial port
                self.ser.write(str_bytes(txd))
        if self.ser:  # Close serial port when thread finished
            self.ser.close()
            self.ser = None


# noinspection PyGlobalUndefined
class Ui_MainWindow(object):
    def __init__(self):
        self.flag = 0
        self.tan_time = 0
        self.num = DEF_TAN_TIME
        self.srt = ''
        self.timer = QTimer()
        self.ser2 = SerialThread(portname, baudrate)
        self.ser2.start()
        self.r = ''
        self.flag_start = False
        self.time_t = 0
        self.time_c = 0
        self.flag_lang = 0
        self.flag_label1 = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(800, 1280)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 100, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        MainWindow.setPalette(palette)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        MainWindow.setMouseTracking(True)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(255, 100, 255);")

        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.pushButton = QtWidgets.QPushButton(self.centralWidget)
        self.pushButton.setGeometry(QtCore.QRect(550, 500, 126, 126))
        font = QtGui.QFont()
        font.setPointSize(48)
        self.timer.start(1000)
        self.timer_nfs = QTimer(self.centralWidget)
        self.timer_nfs.timeout.connect(self.anim_rfid)
        self.timer_nfs.start(150)
        self.timer1 = QTimer(self.centralWidget)
        self.timer1.timeout.connect(self.get_resp1)

        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(255, 60, 255);\n"
                                      "border-style: solid;\n"
                                      "border-color: rgb(255, 10, 255);\n"
                                      "border-width: 10px;\n"
                                      "border-radius: 63px;")
        self.pushButton.setObjectName("pushButton")
        self.toolButton = QtWidgets.QToolButton(self.centralWidget)
        self.toolButton.setGeometry(QtCore.QRect(50, 500, 126, 126))
        font = QtGui.QFont()
        font.setPointSize(48)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton.setFont(font)
        self.toolButton.setStyleSheet("background-color: rgb(255, 60, 255);\n"
                                      "border-style: solid;\n"
                                      "border-color: rgb(255, 10, 255);\n"
                                      "border-width: 10px;\n"
                                      "border-radius: 63px;")
        self.toolButton.setIconSize(QtCore.QSize(32, 32))
        self.toolButton.setCheckable(False)
        self.toolButton.setObjectName("toolButton")
        self.commandLinkButton = QtWidgets.QCommandLinkButton(self.centralWidget)
        self.commandLinkButton.setGeometry(QtCore.QRect(10, 690, 211, 31))
        self.commandLinkButton.setObjectName("commandLinkButton")
        self.widget = QtWidgets.QWidget(self.centralWidget)
        self.widget.setGeometry(QtCore.QRect(400, 420, 71, 121))
        self.widget.setAutoFillBackground(False)
        self.widget.setStyleSheet("background-color: rgb(255, 90, 255);")
        self.widget.setObjectName("widget")
        self.label1 = QtWidgets.QLabel(self.centralWidget)
        self.label1.setGeometry(QtCore.QRect(150, 60, 431, 281))
        self.label2 = QtWidgets.QLabel(self.centralWidget)
        self.label2.setGeometry(QtCore.QRect(10, 40, 431, 881))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.label1.setFont(font)
        self.label1.setAutoFillBackground(False)
        self.label1.setStyleSheet("background-color: rgba(255, 100, 255, 0);")
        self.label1.setScaledContents(True)
        self.label1.setAlignment(QtCore.Qt.AlignCenter)
        self.label1.setWordWrap(True)
        self.label1.setObjectName("label1")

        self.label2.setFont(font)
        self.label2.setAutoFillBackground(False)
        self.label2.setStyleSheet("background-color: rgba(255, 100, 255, 0);")
        self.label2.setScaledContents(True)
        self.label2.setAlignment(QtCore.Qt.AlignCenter)
        self.label2.setWordWrap(True)
        self.label2.setObjectName("label2")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralWidget)
        self.pushButton_2.setEnabled(True)
        self.pushButton_2.setGeometry(QtCore.QRect(200, 800, 330, 130))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color: rgb(255, 60, 255);\n"
                                        "border-style: solid;\n"
                                        "border-color: rgb(255, 10, 255);\n"
                                        "border-width: 5px;\n"
                                        "border-radius: 60px;")
        self.pushButton_2.setIconSize(QtCore.QSize(16, 16))
        self.pushButton_2.setObjectName("pushButton_2")
        self.dataReceived = QtWidgets.QLabel(self.centralWidget)
        self.dataReceived.setGeometry(QtCore.QRect(10, 600, 221, 41))
        self.dataReceived.setStyleSheet("background-color: rgb(255, 90, 255);")
        self.dataReceived.setObjectName("dataReceived")
        self.label_DateTime = QtWidgets.QLabel(self.centralWidget)
        self.label_DateTime.setGeometry(QtCore.QRect(670, 0, 81, 20))
        font = QtGui.QFont()
        font.setFamily("Monospace")
        self.label_DateTime.setFont(font)
        self.label_DateTime.setStyleSheet("")
        self.label_DateTime.setAlignment(QtCore.Qt.AlignJustify | QtCore.Qt.AlignVCenter)
        self.label_DateTime.setObjectName("label_DateTime")
        self.EXIT_btn = QtWidgets.QPushButton(self.centralWidget)
        self.EXIT_btn.setGeometry(QtCore.QRect(418, 320, 61, 91))
        self.EXIT_btn.setStyleSheet("background-color: rgb(255, 100, 255, 0);")
        self.EXIT_btn.setObjectName("EXIT_btn")
        self.toolButton_UA = QtWidgets.QToolButton(self.centralWidget)
        self.toolButton_UA.setGeometry(QtCore.QRect(250, 2, 61, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_UA.setFont(font)
        self.toolButton_UA.setStyleSheet("border-image: url(:/img/ua1.png);\n"
                                         "background-color: rgb(255, 60, 255);\n"
                                         "border-style: solid;\n"
                                         "border-color: rgb(255, 10, 255);\n"
                                         "border-width: 2px;\n"
                                         "border-radius: 20px;")
        self.toolButton_UA.setObjectName("toolButton_UA")
        self.toolButton_EN = QtWidgets.QToolButton(self.centralWidget)
        self.toolButton_EN.setGeometry(QtCore.QRect(350, 2, 61, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_EN.setFont(font)
        self.toolButton_EN.setStyleSheet("border-image: url(:/img/gb1.png);\n"
                                         "background-color: rgb(255, 60, 255);\n"
                                         "border-style: solid;\n"
                                         "border-color: rgb(255, 10, 255);\n"
                                         "border-width: 2px;\n"
                                         "border-radius: 20px;")
        self.toolButton_EN.setObjectName("toolButton_EN")
        self.toolButton_RU = QtWidgets.QToolButton(self.centralWidget)
        self.toolButton_RU.setGeometry(QtCore.QRect(450, 2, 61, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_RU.setFont(font)
        self.toolButton_RU.setAutoFillBackground(False)
        self.toolButton_RU.setStyleSheet("border-image: url(:/img/ru1.png);\n"
                                         "background-color: rgb(255, 60, 255);\n"
                                         "border-style: solid;\n"
                                         "border-color: rgb(255, 10, 255);\n"
                                         "border-width: 2px;\n"
                                         "border-radius: 20px;")
        self.toolButton_RU.setObjectName("toolButton_RU")
        self.checkBox1 = QtWidgets.QCheckBox(self.centralWidget)
        self.checkBox1.setGeometry(QtCore.QRect(20, 760, 16, 21))
        self.checkBox1.setText("")
        self.checkBox1.setObjectName("checkBox1")
        self.checkBox2 = QtWidgets.QCheckBox(self.centralWidget)
        self.checkBox2.setGeometry(QtCore.QRect(40, 760, 16, 21))
        self.checkBox2.setText("")
        self.checkBox2.setChecked(False)
        self.checkBox2.setObjectName("checkBox2")
        self.checkBox3 = QtWidgets.QCheckBox(self.centralWidget)
        self.checkBox3.setGeometry(QtCore.QRect(60, 760, 16, 21))
        self.checkBox3.setText("")
        self.checkBox3.setChecked(False)
        self.checkBox3.setObjectName("checkBox3")
        self.checkBox4 = QtWidgets.QCheckBox(self.centralWidget)
        self.checkBox4.setGeometry(QtCore.QRect(80, 760, 16, 21))
        self.checkBox4.setText("")
        self.checkBox4.setChecked(False)
        self.checkBox4.setTristate(False)
        self.checkBox4.setObjectName("checkBox4")
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralWidget)
        self.lcdNumber.setGeometry(QtCore.QRect(150, 500, 431, 281))

        font = QtGui.QFont()
        font.setPointSize(9)
        self.lcdNumber.setFont(font)
        self.lcdNumber.setStyleSheet("color: rgb(0, 0, 0);")
        self.lcdNumber.setSmallDecimalPoint(False)
        self.lcdNumber.setDigitCount(5)
        self.lcdNumber.setMode(QtWidgets.QLCDNumber.Dec)
        self.lcdNumber.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.lcdNumber.setProperty("value", 99999.0)
        self.lcdNumber.setProperty("intValue", 99999)
        self.lcdNumber.setObjectName("lcdNumber")
        self.lcdNumber.setStyleSheet("border:none;")
        self.lcdNumber.setStyleSheet("color:red;")
        self.textEdit = QtWidgets.QTextEdit(self.centralWidget)
        self.textEdit.setEnabled(True)
        self.textEdit.setGeometry(QtCore.QRect(4, 70, 471, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit.sizePolicy().hasHeightForWidth())
        self.textEdit.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        self.textEdit.setPalette(palette)
        self.textEdit.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.BlankCursor))
        self.textEdit.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                    "alternate-background-color: rgb(255, 255, 255);\n"
                                    "gridline-color: rgb(255, 255, 255);\n"
                                    "border-color: rgb(255, 255, 255);")
        self.textEdit.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.textEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textEdit.setUndoRedoEnabled(False)
        self.textEdit.setReadOnly(True)
        self.textEdit.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.textEdit.setObjectName("textEdit")
        self.pushButton_Agree = QtWidgets.QPushButton(self.centralWidget)
        self.pushButton_Agree.setEnabled(True)
        self.pushButton_Agree.setGeometry(QtCore.QRect(110, 725, 271, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Agree.setFont(font)
        self.pushButton_Agree.setStyleSheet("background-color: rgb(255, 160, 255);\n"
                                            "border-style: solid;\n"
                                            "border-color: rgb(255, 10, 255);\n"
                                            "border-width: 5px;\n"
                                            "border-radius: 10px;")
        self.pushButton_Agree.setObjectName("pushButton_Agree")
        self.toolButton_UP = QtWidgets.QToolButton(self.centralWidget)
        self.toolButton_UP.setGeometry(QtCore.QRect(410, 220, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Lato Black")
        font.setPointSize(56)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_UP.setFont(font)
        self.toolButton_UP.setStyleSheet("border-image: url(:/img/up1.png);\n"
                                         "background-color: rgb(255, 60, 255);\n"
                                         "border-style: solid;\n"
                                         "border-color: rgb(0, 120, 20);\n"
                                         "border-width: 5px;\n"
                                         "border-radius: 30px;")
        self.toolButton_UP.setObjectName("toolButton_UP")
        self.toolButton_UA_3 = QtWidgets.QToolButton(self.centralWidget)
        self.toolButton_UA_3.setGeometry(QtCore.QRect(410, 705, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Lato Black")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.toolButton_UA_3.setFont(font)
        self.toolButton_UA_3.setStyleSheet("border-image: url(:/img/dn.png);\n"
                                           "background-color: rgb(255, 60, 255);\n"
                                           "border-style: solid;\n"
                                           "border-color: rgb(0, 120, 20);\n"
                                           "border-width: 5px;\n"
                                           "border-radius: 30px;")
        self.toolButton_UA_3.setObjectName("toolButton_UA_3")
        self.pushButton_Begin = QtWidgets.QPushButton(self.centralWidget)
        self.pushButton_Begin.setEnabled(True)
        self.pushButton_Begin.setGeometry(QtCore.QRect(50, 400, 768, 330))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.pushButton_Begin.setAutoFillBackground(False)
        self.pushButton_Begin.setStyleSheet("border:none;")
        # self.pushButton_Begin.setStyleSheet("background-color: rgb(255, 60, 255);\n"
        #                                     "border-style: solid;\n"
        #                                     "border-color: rgb(255, 10, 255);\n"
        #                                     "border-width: 15px;\n"
        #                                     "border-radius: 165px;")
        # self.pushButton_Begin.setIconSize(QtCore.QSize(16, 16))
        self.pushButton_Begin.setObjectName("pushButton_Begin")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralWidget)
        self.pushButton_3.setGeometry(QtCore.QRect(34, 632, 431, 81))
        font = QtGui.QFont()
        font.setPointSize(48)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("background-color: rgb(255, 60, 255);\n"
                                        "color: rgb(0, 255, 4);\n"
                                        "border-style: solid;\n"
                                        "border-color: rgb(10, 255, 10);\n"
                                        "border-width: 8px;\n"
                                        "border-radius: 40px;")
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_UAH = QtWidgets.QLabel(self.centralWidget)
        self.label_UAH.setGeometry(QtCore.QRect(60, 390, 351, 71))
        font = QtGui.QFont()
        font.setPointSize(46)
        font.setBold(True)
        font.setWeight(75)
        self.label_UAH.setFont(font)
        self.label_UAH.setAlignment(QtCore.Qt.AlignCenter)
        self.label_UAH.setObjectName("label_UAH")
        self.label_UAH.raise_()
        self.pushButton_Begin.raise_()
        self.commandLinkButton.raise_()
        self.widget.raise_()
        self.label1.raise_()
        self.pushButton_2.raise_()
        self.dataReceived.raise_()
        self.label_DateTime.raise_()
        self.EXIT_btn.raise_()
        self.toolButton_UA.raise_()
        self.toolButton_EN.raise_()
        self.toolButton_RU.raise_()
        self.checkBox1.raise_()
        self.checkBox2.raise_()
        self.checkBox3.raise_()
        self.checkBox4.raise_()
        self.checkBox1.hide()
        self.checkBox2.hide()
        self.checkBox3.hide()
        self.checkBox4.hide()
        self.lcdNumber.raise_()
        self.textEdit.raise_()
        self.pushButton_Agree.raise_()
        self.toolButton_UP.raise_()
        self.toolButton_UA_3.raise_()
        self.pushButton_3.raise_()
        self.toolButton.raise_()
        self.pushButton.raise_()
        self.label2.hide()
        MainWindow.setCentralWidget(self.centralWidget)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)

        self.timer.timeout.connect(self.showTime)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def anim_rfid(self):
        if self.flag == 0:
            self.pushButton_Begin.setIcon(QtGui.QIcon('img/1.png'))
            self.pushButton_Begin.setIconSize(QtCore.QSize(512, 512))
            self.pushButton_Begin.show()
            # self.label1.setPixmap(QtGui.QPixmap('img/1.png'))
            self.flag += 1
        elif self.flag == 1:
            self.pushButton_Begin.setIcon(QtGui.QIcon('img/2.png'))
            # self.label1.setPixmap(QtGui.QPixmap('img/2.png'))
            self.flag += 1
        elif self.flag == 2:
            self.pushButton_Begin.setIcon(QtGui.QIcon('img/3.png'))
            # self.label1.setPixmap(QtGui.QPixmap('img/3.png'))
            self.flag = 0
        else:
            self.pushButton_Begin.setIcon(QtGui.QIcon('img/contactless_black.png'))
        # self.label1.setPixmap(QtGui.QPixmap('img/contactless_black.png'))

    def get_card(self):
        card_type = AnyCardType()
        # create the request. Wait for up to x seconds for a card to be attached
        request = CardRequest(timeout=5, cardType=card_type)

        # listen for the card

        try:
            service = request.waitforcard()
        except CardRequestTimeoutException:
            print("ERROR: No card detected")
            return

        # when a card is attached, open a connection
        conn = service.connection
        conn.connect()

        # get and print the ATR and UID of the card
        get_uid = util.toBytes("FF CA 00 00 00")
        ART = util.toHexString(conn.getATR())
        # print("ATR = {}".format(util.toHexString(conn.getATR())))
        data, sw1, sw2 = conn.transmit(get_uid)
        uid = util.toHexString(data)
        status = util.toHexString([sw1, sw2])
        print("UID = {}\tstatus = {}".format(uid, status))
        albums = (ART, uid, status)

        # print(albums)
        # cursor.executemany("INSERT INTO albums VALUES (?,?,?)", albums)
        # conn1.commit()

        for u in cursor.execute("SELECT * FROM albums "):
            if albums == u:
                # print("pass")
                return True
            else:
                #  print("fail")
                return False

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "+"))
        self.toolButton.setText(_translate("MainWindow", "-"))
        self.commandLinkButton.setText(_translate("MainWindow", "CommandLinkButton"))
        self.label1.setText(_translate("MainWindow",
                                       "<html><head/><body><p><span style=\" font-size:26pt;\">5 минут загара</span></p></body></html>"))
        self.pushButton_2.setText(_translate("MainWindow", "СПЛАТИТИ"))
        self.dataReceived.setText(_translate("MainWindow", "TextLabel"))
        self.label_DateTime.setText(_translate("MainWindow", "0:00:00"))
        self.EXIT_btn.setText(_translate("MainWindow", "EXIT \n"
                                                       "(temp)"))
        self.toolButton_UA.setText(_translate("MainWindow", "УКР"))
        self.toolButton_EN.setText(_translate("MainWindow", "ENG"))
        self.toolButton_RU.setText(_translate("MainWindow", "РУС"))
        self.textEdit.setHtml(_translate("MainWindow",
                                         "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                         "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                         "p, li { white-space: pre-wrap; }\n"
                                         "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">Внимание! </span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">ОЗНАКОМЬТЕСЬ С ПРАВИЛАМИ И ТЕХНИКОЙ БЕЗОПАСНОСТИ СТУДИИ ЗАГАРА SmartSun</span></p>\n"
                                         "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Sans Serif\'; font-size:9pt;\"><br /></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">1.  Перед посещением солярия проконсультируйтесь с врачем. </span></p>\n"
                                         "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Sans Serif\'; font-size:9pt;\"><br /></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">2. Определите тип Вашей кожи, воспользовавшись QR кодом, или позвонив оператору. </span></p>\n"
                                         "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Sans Serif\'; font-size:9pt;\"><br /></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">3. Категорически запрещено загорать людям не достигшим 18ти летнего возраста. </span></p>\n"
                                         "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Sans Serif\'; font-size:9pt;\"><br /></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">4. Людям, принимающим следующие лекарственные  средства:  транквилизаторы, антидепрессанты, болеутоляющие препараты, а также антибиотики. Эти препараты повышают светочувствительность кожи и могут спровоцировать аллергию. </span></p>\n"
                                         "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Sans Serif\'; font-size:9pt;\"><br /></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">5. страдающим от рака кожи или ранее перенёсшим его, или предрасположенным к раку кожи</span></p>\n"
                                         "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Sans Serif\'; font-size:9pt;\"><br /></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">6. находящимся под наблюдением врача при заболеваниях, которые связаны со светочувствительностью, людям лечащимся от светочувствительности. Кроме того, солярий не рекомендован людям, предрасположенным к появлению веснушек. </span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">7. Людям с натуральными рыжими волосами.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">8. Людям, имеющим аномальную пигментацию на коже.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">9. Людям, имеющим много родинок.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">10. Людям, не переносящим загар.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">11. Людям, не способным загорать вообще или не способным загорать без обгорания под воздействием солнца.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">12. Людям, получавшим частые солнечные ожоги в детстве.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">13. Перед сеансом загара удалите с кожи всю косметику.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">14. Снимите украшения.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">15. Не проводите в этот день косметические процедуры (чистку кожи, пилинг и т.д.). Это очень большая нагрузка на кожу. </span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">16. Допустимы только питательные и увлажняющие маски после сеанса.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">17. Не посещайте перед сеансом загара баню или сауну - эти процедуры лишают кожу её естественной защиты, и результатом посещения солярия может быть ожог. Также перед сеансом не стоит мыться мылом.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">18. Перед сеансом воспользуйтесь специальными средствами для загара в солярии – они сведут к минимуму вредные последствия. Также избегайте средств, способствующих усилению загара. Косметика после загара обладает интенсивным успокаивающим и охлаждающим действием - после сеанса солярия нанесите на кожу лосьон, способствующий проявлению загара и закреплению его на коже. </span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">19. Во время сеанса защитите волосы шапочкой, губы смажьте увлажняющим бальзамом, наденьте специальные очки, прикройте грудь или воспользуйтесь специальными наклейками – «стикини». Загар в области груди крайне вреден. ВНИМАНИЕ: специальные прилагаемые очки не могут заменить ни контактные линзы, ни солнцезащитные очки – их использование, наряду с другими позициями прилагаемых средств обязательно!</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">20. Посещение солярия усиливает скорость обмена веществ, поэтому после сеанса постарайтесь немного отдохнуть. </span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">21. Не занимайтесь в этот день никакой физической работой.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">22. Не загорайте в солярии два дня подряд.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">23. Если вы решили принять душ после солярия, откажитесь от скрабов и средств, содержащих мыло. Используйте только очень мягкие средства для чувствительной кожи.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">24. При появлении неожиданных побочных реакций (например, непрерывный зуд, который появляется в течение 48 часов после первого сеанса использования солярия, ощущений жжения, красноты, волдырей, кожных заболеваний), обязательно нужно обратиться за медицинской консультацией перед дальнейшей эксплуатацией солярия.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">25. Нельзя в один и тот же день использовать солярий и загорать на солнце.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">26. При использовании солярия необходимо защищать чувствительные части кожи (шрамы, татуировки и половые органы) от облучения.</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">27. Приборы с УФ излучением имеют ряд негативных факторов:</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">  </span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">а) Ультрафиолетовое излучение солярия способно вызвать повреждение кожи или глаз, которые могут быть необратимыми. Соответствующие биологические реакции связаны с качеством или количеством излучения также, как с индивидуальной чувствительностью кожи и глаз;</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">б) Длительное облучение может грозить ожогами. Избыточно повторяемое ультрафиолетовое облучение солярием способно привести как к преждевременному старению кожи, так и к увеличению риска появления опухолей, который возрастает с накоплением облучения;</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">в) Если при облучении глаза не защищены, на них может развиваться поверхностное воспаление. В некоторых случаях, скажем, после операции катаракты, длительное облучение грозит повреждением сетчатки глаза. Также после многократно повторяющихся облучений может развиться катаракта;</span></p>\n"
                                         "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">г) При индивидуальной чувствительности или аллергической реакции к излучению перед процедурой стоит проконсультироваться у медицинского специалиста.</span></p>\n"
                                         "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Sans Serif\'; font-size:9pt;\"><br /></p>\n"
                                         "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Sans Serif\'; font-size:9pt;\"><br /></p></body></html>"))
        self.pushButton_Agree.setText(_translate("MainWindow", "ПОГОДЖУЮСЯ"))
        self.toolButton_UP.setText(_translate("MainWindow", "^"))
        self.toolButton_UA_3.setText(_translate("MainWindow", "V"))
        # self.pushButton_Begin.setText(_translate("MainWindow", "ПОЧАТИ"))
        self.pushButton_3.setText(_translate("MainWindow", "На головну"))
        self.label_UAH.setText(_translate("MainWindow", "00000 грн"))
        self.textEdit.setEnabled(False)
        self.textEdit.setVisible(False)
        self.toolButton_UP.setVisible(False)
        self.toolButton_UP.setEnabled(False)
        self.toolButton_UA_3.setEnabled(False)
        self.toolButton_UA_3.setVisible(False)
        self.toolButton.setEnabled(False)
        self.toolButton.setVisible(False)
        self.pushButton.setVisible(False)
        self.pushButton.setEnabled(False)
        self.label_UAH.setEnabled(False)
        self.label_UAH.setVisible(False)
        self.pushButton_Agree.setVisible(False)
        self.pushButton_Agree.setEnabled(False)
        self.pushButton_3.setEnabled(False)
        self.pushButton_3.setVisible(False)
        self.widget.setEnabled(False)
        self.widget.setVisible(False)
        self.EXIT_btn.setVisible(False)
        self.EXIT_btn.setEnabled(False)
        self.commandLinkButton.setEnabled(False)
        self.commandLinkButton.setVisible(False)
        self.dataReceived.setEnabled(False)
        self.dataReceived.setVisible(False)
        self.lcdNumber.setVisible(False)
        self.lcdNumber.setEnabled(False)
        self.pushButton_2.setEnabled(False)
        self.pushButton_2.setVisible(False)
        self.label1.setVisible(True)

        self.label1.setText("Прикладіть картку та натисніть на екран")
        self.pushButton_2.setText("Вибір")
        self.label1.setEnabled(False)
        self.pushButton_Begin.clicked.connect(self.start_anime)

        self.toolButton.clicked.connect(lambda: self.on_toolButton_clicked())
        self.pushButton.clicked.connect(lambda: self.on_pushButton_clicked())
        self.pushButton_2.clicked.connect(lambda: self.on_pushButton_2_clicked())

        self.toolButton_UA.clicked.connect(lambda: self.on_pushButton_UA_clicked())
        self.toolButton_RU.clicked.connect(lambda: self.on_pushButton_RU_clicked())
        self.toolButton_EN.clicked.connect(lambda: self.on_pushButton_EN_clicked())

    def start_anime(self):
        self.nfs_flashing()

    def anim_nfs(self):
        global RESULT
        if self.get_card():
            self.label2.setText("Pass")
            self.timer_nfs.stop()
            self.label1.setVisible(False)
            self.label1.setEnabled(False)

            RESULT = True
        else:
            self.label2.setText("Error")
            self.timer_nfs.stop()
            self.label1.setVisible(False)
            self.label1.setEnabled(False)
            RESULT = False
        self.pass_with_nfs()

    def showTime(self):
        time = QDateTime.currentDateTime()
        timeDisplay = time.toString('hh:mm:ss ')
        self.label_DateTime.setText(timeDisplay)

    def nfs_flashing(self):
        self.label2.show()
        self.label2.raise_()
        # self.label2.setText("Прикладіть браслет \n до зчитувача")
        self.label2.setVisible(True)
        self.label2.setEnabled(True)
        # self.timer_nfs.start(150)
        self.label1.show()
        self.pushButton_Begin.hide()

        time.sleep(1)

        self.anim_nfs()
        # print(self.flag)

    def pass_with_nfs(self):
        if RESULT:
            self.label2.hide()
            self.label2.setVisible(False)
            self.label2.setEnabled(False)
            if self.flag_lang == 1:
                self.label1.setText("Виберіть час засмаги")
            elif self.flag_lang == 3:
                self.label1.setText("Выберите время загара")
            elif self.flag_lang == 2:
                self.label1.setText("Choose a tan time")
            else:
                self.label1.setText("Виберіть час засмаги")

            self.flag_label1 = 1
            self.label1.setVisible(True)
            self.label1.show()
            self.pushButton.setVisible(True)
            self.pushButton.setEnabled(True)
            self.toolButton.setEnabled(True)
            self.toolButton.setVisible(True)
            self.pushButton_2.setEnabled(True)
            self.pushButton_2.setVisible(True)
            self.label2.setVisible(True)
            if self.flag_lang == 1:
                self.label2.setText('{t:d} хвилин'.format(t=DEF_TAN_TIME))
            elif self.flag_lang == 3:
                self.label2.setText('{t:d} минут'.format(t=DEF_TAN_TIME))
            elif self.flag_lang == 2:
                self.label2.setText('{t:d} minute'.format(t=DEF_TAN_TIME))
            else:
                self.label2.setText('{t:d} хвилин'.format(t=DEF_TAN_TIME))

            self.label2.setGeometry(QtCore.QRect(270, 500, 200, 100))
        # self.label2.setStyleSheet("color:black;")
        else:
            self.flag_label1 = 0
            self.flag_lang = 0
            self.label2.hide()
            self.label2.setVisible(False)
            self.label2.setEnabled(False)
            self.label1.setText("Відмовлено")
            self.label1.setVisible(True)
            delay(3000)
            self.label1.setText("Прикладіть картку та натисніть на екран")

            self.pushButton_Begin.setEnabled(True)
            self.pushButton_Begin.setVisible(True)
            self.pushButton_Begin.show()
            self.timer_nfs.start(150)
            self.anim_rfid()
            self.label1.show()

    def on_toolButton_clicked(self):

        self.pushButton_2.setEnabled(True)
        self.pushButton.setEnabled(True)

        if self.num > 3:
            self.num -= 1

        if self.num == 3:
            self.toolButton.setEnabled(False)
        else:
            self.toolButton.setEnabled(True)
        self.updateTanningTimeMsg()

    def get_resp1(self):

        self.ser2.ser_out(SET_T)
        print("from get_resp1")
        print("--->>", hexdump(self.ser2.recives))
        if hexdump(self.ser2.recives).split() == '06':
            print("<--", hexdump(self.ser2.recives).split())
            if hexdump(self.ser2.recives) == '06':
                print("After get ACK: -- > ")
                print(hexdump(self.ser2.recives))
            elif hexdump(self.ser2.recives).split()[2] == '32':
                self.time_t = self.ser2.recives[3] + self.ser2.recives[4] + self.ser2.recives[5]
                print(self.time_t)
                if self.flag_lang == 1:
                    self.label1.setText("Розпочато сеанс засмаги")
                elif self.flag_lang == 3:
                    self.label1.setText("Начат сеанс загара")
                elif self.flag_lang == 2:
                    self.label1.setText("A tanning session has started")
                else:
                    self.label1.setText("Розпочато сеанс засмаги")

                self.lcdNumber.setVisible(True)
                minute, sec = divmod(int(self.time_t), 60)
                Time = str(minute) + ":" + str(sec)
                self.lcdNumber.display(Time)
                self.lcdNumber.setStyleSheet("color:red;")

            elif hexdump(self.ser2.recives).split()[2] == '33':
                self.time_c = self.ser2.recives[3] + self.ser2.recives[4] + self.ser2.recives[5]
                self.lcdNumber.setVisible(True)
                # self.label1.setText("Охолодження солярію \n зачекайте:")
                if self.flag_lang == 1:
                    self.label1.setText("Охолодження солярію \n зачекайте:")
                elif self.flag_lang == 3:
                    self.label1.setText("Охлаждение солярия \n подождите:")
                elif self.flag_lang == 2:
                    self.label1.setText("Solarium cooling \n wait:")
                else:
                    self.label1.setText("Охолодження солярію \n зачекайте:")
                min_c, sec_c = divmod(int(self.time_c), 60)
                Time_c = str(min_c) + ":" + str(sec_c)
                self.lcdNumber.display(Time_c)
                self.lcdNumber.setStyleSheet("color:blue;")
            elif hexdump(self.ser2.recives).split()[1] == '31' and hexdump(self.ser2.recives).split()[
                2] == '30' and '30' == \
                    hexdump(self.ser2.recives).split()[3] and hexdump(self.ser2.recives).split()[4] == '30':
                print("Stop after ACK")
                self.timer1.stop()
                self.lcdNumber.setVisible(False)
                self.label1.setText("Сеанс завершено")
                delay(1000)
                self.label1.setText("Прикладіть картку та натисніть на екран")
                self.pushButton_Begin.setEnabled(True)
                self.pushButton_Begin.setVisible(True)
                self.pushButton_Begin.show()
                self.timer_nfs.start(150)
                self.anim_rfid()
                self.label1.show()

        else:
            print("-->", hexdump(self.ser2.recives))
            if hexdump(self.ser2.recives) == '06':
                print(hexdump(self.ser2.recives))
            elif hexdump(self.ser2.recives).split()[2] == '32':
                self.time_t = self.ser2.recives[3] + self.ser2.recives[4] + self.ser2.recives[5]
                print(self.time_t)
                if self.flag_lang == 1:
                    self.label1.setText("Розпочато сеанс засмаги")
                elif self.flag_lang == 3:
                    self.label1.setText("Начат сеанс загара")
                elif self.flag_lang == 2:
                    self.label1.setText("A tanning session has started")
                else:
                    self.label1.setText("Розпочато сеанс засмаги")
                # self.label1.setText("Розпочато сеанс засмаги")
                self.lcdNumber.setVisible(True)
                minute, sec = divmod(int(self.time_t), 60)
                Time = str(minute) + ":" + str(sec)
                self.lcdNumber.display(Time)
                self.lcdNumber.setStyleSheet("color:red;")
            elif hexdump(self.ser2.recives).split()[2] == '33':
                self.time_c = self.ser2.recives[3] + self.ser2.recives[4] + self.ser2.recives[5]
                self.lcdNumber.setVisible(True)
                # self.label1.setText("Охолодження солярію \n зачекайте:")
                if self.flag_lang == 1:
                    self.label1.setText("Охолодження солярію \n зачекайте:")
                elif self.flag_lang == 3:
                    self.label1.setText("Охлаждение солярия \n подождите:")
                elif self.flag_lang == 2:
                    self.label1.setText("Solarium cooling \n wait:")
                else:
                    self.label1.setText("Охолодження солярію \n зачекайте:")
                min_c, sec_c = divmod(int(self.time_c), 60)
                Time_c = str(min_c) + ":" + str(sec_c)
                self.lcdNumber.display(Time_c)
                self.lcdNumber.setStyleSheet("color:blue;")
            elif hexdump(self.ser2.recives).split()[1] == '31' and hexdump(self.ser2.recives).split()[
                2] == '30' and '30' == \
                    hexdump(self.ser2.recives).split()[3] and hexdump(self.ser2.recives).split()[4] == '30':
                print("Refresh sys")
                self.timer1.stop()
                self.lcdNumber.setVisible(False)
                self.label1.setText("Сеанс завершено")
                delay(1000)
                self.label1.setText("Прикладіть картку та натисніть на екран")
                self.pushButton_Begin.setEnabled(True)
                self.pushButton_Begin.setVisible(True)
                self.pushButton_Begin.show()
                self.timer_nfs.start(150)
                self.anim_rfid()
                self.label1.show()
            else:
                print("GET : -- ", self.ser2.recives)

    #  delay(100)
    # # print("Resive from in cycle", self.ser2.recives)
    #  if (self.ser2.recives).split()[0] == '06':
    #      print((hexdump(self.ser2.recives).split()[0]))
    #      delay(300)
    #      res = hexdump(self.ser2.recives).split()[2]
    #      res2 = hexdump(self.ser2.recives).split()[3]
    #      res3 = hexdump(self.ser2.recives).split()[4]
    #      res4 = hexdump(self.ser2.recives).split()[5]
    #      print(res, res2, res3, res4)
    #  else:
    #      res = hexdump(self.ser2.recives).split()[2]
    #      res2 = hexdump(self.ser2.recives).split()[3]
    #      res3 = hexdump(self.ser2.recives).split()[4]
    #      res4 = hexdump(self.ser2.recives).split()[5]
    #      print(res, res2, res3, res4)
    # # t = "".join(time_tan)
    # # print(int(t))
    #  if int(res) == 32:
    #      delay(50)
    #      if (hexdump(self.ser2.recives).split()[0]) == '06':
    #          self.time_t = self.ser2.recives[3] + self.ser2.recives[4] + self.ser2.recives[5]
    #          print(self.time_t)
    #      else:
    #          self.time_t = self.ser2.recives[3] + self.ser2.recives[4] + self.ser2.recives[5]
    #          print(self.time_t)
    #
    #      self.label1.setText("Розпочато сеанс засмаги")
    #      self.lcdNumber.setVisible(True)
    #      min, sec = divmod(int(self.time_t), 60)
    #      Time = str(min) + ":" + str(sec)
    #      self.lcdNumber.display(Time)
    #      self.lcdNumber.setStyleSheet("color:red;")
    #  if int(res) == 33:
    #      if (hexdump(self.ser2.recives).split()[0]) == '06':
    #          print((hexdump(self.ser2.recives).split()[0]))
    #          delay(300)
    #          self.time_c = self.ser2.recives[3] + self.ser2.recives[4] + self.ser2.recives[5]
    #      else:
    #          self.time_c = self.ser2.recives[3] + self.ser2.recives[4] + self.ser2.recives[5]
    #      self.lcdNumber.setVisible(True)
    #      self.label1.setText("Охолодження солярію \n зачекайте:" )
    #
    #      min_c, sec_c = divmod(int(self.time_c), 60)
    #      Time_c = str(min_c) + ":" + str(sec_c)
    #      self.lcdNumber.display(Time_c)
    #      self.lcdNumber.setStyleSheet("color:blue;")
    #  if int(res) == 30 and int(res2) == 30 and int(res3) == 30:
    #      self.timer1.stop()
    #      self.lcdNumber.setVisible(False)
    #      self.label1.setText("Сеанс завершено")
    #      delay(1000)
    #      self.label1.setText("Прикладіть картку та натисніть на екран")
    #      self.pushButton_Begin.setEnabled(True)
    #      self.pushButton_Begin.setVisible(True)
    #      self.pushButton_Begin.show()
    #      self.timer_nfs.start(150)
    #      self.anim_rfid()
    #      self.label1.show()
    #      # set params

    # print(res)

    def on_pushButton_UA_clicked(self):
        if self.flag_label1 == 0:
            self.label1.setText("Прикладіть картку та натисніть на екран")
        elif self.flag_label1 == 1:
            self.label1.setText("Виберіть час засмаги")
        elif self.flag_label1 == 4:
            self.label1.setText("Ввійдіть та натисніть \n СТАРТ")

        self.pushButton_2.setText("Почати")
        print(self.flag_lang)
        if self.flag_lang != 1:
            self.flag_lang = 1

    def on_pushButton_EN_clicked(self):
        if self.flag_label1 == 0:
            self.label1.setText("Attach the card and tap the screen")
        elif self.flag_label1 == 1:
            self.label1.setText("Choose a tan time")
        elif self.flag_label1 == 4:
            self.label1.setText("Enter and press \n START")

        self.pushButton_2.setText("Start")
        print(self.flag_lang)
        if self.flag_lang != 2:
            self.flag_lang = 2

    def on_pushButton_RU_clicked(self):
        if self.flag_label1 == 0:
            self.label1.setText("Приложите карту и нажмите на экран")
        elif self.flag_label1 == 1:
            self.label1.setText("Выберите время загара")
        elif self.flag_label1 == 4:
            self.label1.setText("Войдите и нажмите \n СТАРТ")

        self.pushButton_2.setText("Начать")
        print(self.flag_lang)
        if self.flag_lang != 3:
            self.flag_lang = 3

    def on_pushButton_clicked(self):

        # self.ser2.ser_out(SET_T)
        # global r
        # print("Resive from", self.ser2.recives)
        # print("r1", r)

        self.pushButton_2.setEnabled(True)
        self.toolButton.setEnabled(True)

        print(self.num)
        if self.num < 15:
            self.num += 1
        else:
            self.pushButton.setEnabled(False)
        self.updateTanningTimeMsg()

    def updateTanningTimeMsg(self):
        global string_tan_time
        if self.pushButton_2.isEnabled():

            if 5 > self.num >= 3:
                if self.flag_lang == 1:
                    string_tan_time = '{f:d} хвилини'.format(f=self.num)
                elif self.flag_lang == 2:
                    string_tan_time = '{f:d} minutes'.format(f=self.num)
                elif self.flag_lang == 3:
                    string_tan_time = '{f:d} минуты'.format(f=self.num)
                else:
                    string_tan_time = '{f:d} хвилини'.format(f=self.num)

            elif 5 <= self.num < 16:
                if self.flag_lang == 1:
                    string_tan_time = '{f:d} хвилин'.format(f=self.num)
                elif self.flag_lang == 2:
                    string_tan_time = '{f:d} minutes'.format(f=self.num)
                elif self.flag_lang == 3:
                    string_tan_time = '{f:d} минут'.format(f=self.num)
                else:
                    string_tan_time = '{f:d} хвилин'.format(f=self.num)


        self.label2.setText(string_tan_time)

    def refresh_sys(self):
        pass

    def on_pushButton_2_clicked(self):

        # Відправляємо час засмаги контролеру
        # далі
        # Чекаємо натискання клавіші старт та запускаємо таймер на екрані
        #
        self.flag_label1 = 4
        time_in_sec = int(self.label2.text().split()[0]) * 60
        x = [int(hex(ord(a)), base=16) for a in str(time_in_sec)]
        res = [0x02, 0x31, 0x53]
        for i in x:
            res.append(i)
        res.append(0x03)
        crc = get_CRC(res)
        print(crc)
        res.append(int(crc, base=16))
        print(res)
        baseq = "".join([chr(i) for i in res])
        self.ser2.ser_out(baseq)
        print(baseq)
        # GUI

        self.pushButton_2.setEnabled(False)
        self.pushButton_2.setVisible(False)
        self.toolButton.setEnabled(False)
        self.toolButton.setVisible(False)
        self.pushButton.setEnabled(False)
        self.pushButton.setVisible(False)
        self.label2.setVisible(False)

        if self.flag_lang == 1:
            self.label1.setText("Ввійдіть та натисніть \n СТАРТ")
        elif self.flag_lang == 3:
            self.label1.setText("Войдите и нажмите \n СТАРТ")
        elif self.flag_lang == 2:
            self.label1.setText("Enter and press \n START")
        else:
            self.label1.setText("Ввійдіть та натисніть \n СТАРТ")
        delay(200)
        self.timer1.start(1000)

        # crc = get_CRC(hexdump(result))

        # print(crc)
        #

# if __name__ == "__main__":
#     import sys
#
#     app = QtWidgets.QApplication(sys.argv)
#     SettingMenu = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(SettingMenu)
#     SettingMenu.show()
#     sys.exit(app.exec_())
